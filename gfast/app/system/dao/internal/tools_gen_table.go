// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// ToolsGenTableDao is the manager for logic model data accessing and custom defined data operations functions management.
type ToolsGenTableDao struct {
	gmvc.M                      // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      toolsGenTableColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB               // DB is the raw underlying database management object.
	Table  string               // Table is the underlying table name of the DAO.
}

// ToolsGenTableColumns defines and stores column names for table tools_gen_table.
type toolsGenTableColumns struct {
	TableId        string // 编号
	TableName      string // 表名称
	TableComment   string // 表描述
	ClassName      string // 实体类名称
	TplCategory    string // 使用的模板（crud单表操作 tree树表操作）
	PackageName    string // 生成包路径
	ModuleName     string // 生成模块名
	BusinessName   string // 生成业务名
	FunctionName   string // 生成功能名
	FunctionAuthor string // 生成功能作者
	Options        string // 其它生成选项
	CreateTime     string // 创建时间
	UpdateTime     string // 更新时间
	Remark         string // 备注

}

// NewToolsGenTableDao creates and returns a new DAO object for table data access.
func NewToolsGenTableDao() *ToolsGenTableDao {
	columns := toolsGenTableColumns{
		TableId:        "table_id",
		TableName:      "table_name",
		TableComment:   "table_comment",
		ClassName:      "class_name",
		TplCategory:    "tpl_category",
		PackageName:    "package_name",
		ModuleName:     "module_name",
		BusinessName:   "business_name",
		FunctionName:   "function_name",
		FunctionAuthor: "function_author",
		Options:        "options",
		CreateTime:     "create_time",
		UpdateTime:     "update_time",
		Remark:         "remark",
	}
	return &ToolsGenTableDao{
		C:     columns,
		M:     g.DB("default").Model("tools_gen_table").Safe(),
		DB:    g.DB("default"),
		Table: "tools_gen_table",
	}
}
